AWSTemplateFormatVersion: '2010-09-09'
Resources:  

  AmazonSageMaker:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: 'AmazonSageMaker-ExecutionRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'sagemaker.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      Path: '/'
      Policies:
      - PolicyName: iam
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - "s3:*",
            - "ec2:*",
            - "sagemaker:CreateNotebookInstance",
            - "sagemaker:CreatePresignedNotebookInstanceUrl",
            - "sagemaker:StopNotebookInstance",
            - "sagemaker:ListNotebookInstances",
            - "sagemaker:DescribeNotebookInstance",
            - "sagemaker:StartNotebookInstance",
            - "ssm:*"
            Resource: '*'

  AmazonSageMakerEC2:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: 'AmazonSageMakerEC2Role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'ec2.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      Path: '/'
      Policies:
      - PolicyName: iam
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - "s3:*",
            - "ec2:*",
            - "sagemaker:CreateNotebookInstance",
            - "sagemaker:CreatePresignedNotebookInstanceUrl",
            - "sagemaker:StopNotebookInstance",
            - "sagemaker:ListNotebookInstances",
            - "sagemaker:DescribeNotebookInstance",
            - "sagemaker:StartNotebookInstance",
            - "ssm:*"
            Resource: '*'
          - Effect: Allow
            Action:
              'iam:PassRole'
            Resource: 'arn:aws:iam::*:role/AmazonSageMaker-ExecutionRole'
  
  AmazonSageMakerInstanceProfilev1:
    Type: AWS::IAM::InstanceProfile
    DependsOn: AmazonSageMakerEC2
    Properties:
      InstanceProfileName: AmazonSageMaker_EC2_ROLE_v1
      Path: "/"
      Roles:
      - "AmazonSageMakerEC2Role"

  ShutdownSchedule:            
    Type: AWS::Events::Rule
    Properties: 
      Description: 'Hourly check on instances uptime.'
      Name: 'SSSC-SageMaker'
      ScheduleExpression: rate(1 hour)
      Targets: 
        - 
          Id: Shutdown
          Arn: !GetAtt Shutdown.Arn 

  Type: AWS::SSM::Parameter
    Properties: 
      Name: SageMakerData
      Type: String
      Value: "---"

  Shutdown:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName : "SSSC-SageMaker-Shutdown"
      Runtime: python3.7
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt LambdaIDPRole.Arn
      Timeout: 30
      Code:
        ZipFile: |
          import json
          from datetime import datetime, timedelta
          import boto3
          ssm = boto3.client('ssm')
          sage_client = boto3.client('sagemaker')


          def stop(user):
              try:
                  name = user + 'NotebookInstance'
                  sage_client.stop_notebook_instance(NotebookInstanceName=name)
              except Exception as e:
                  print('Cant shutdown ' + user + 'NotebookInstance. Might be shutdown already')

          def checkIfShutdown(timeLimit, launchTime):
              
              dateLaunchTime = datetime.strptime(launchTime, "%H:%M:%S - %B/%d/%y")
              hours_from_then = dateLaunchTime + timedelta(hours=timeLimit)
              print("Time to shutdown: " + str(hours_from_then))
              print("Time launched: " + str(dateLaunchTime))
              print("Time now: " + str(datetime.utcnow()))
              if datetime.utcnow() > hours_from_then:
                  return True
              else:
                  return False

          def checkIfDelete(user):
              response = sage_client.describe_notebook_instance(
                  NotebookInstanceName=user + 'NotebookInstance'
              )
              if response['NotebookInstanceStatus'] != 'InService':
                  return True
              else:
                  return False

          def lambda_handler(event, context):
              response = ssm.get_parameter(
                  Name='SageMakerData'
              )
              
              shutdownList = response['Parameter']['Value'].split('---')
              noList = ['', '']
              print(shutdownList)
              if shutdownList == noList:
                  return
              
              for instance in shutdownList:
                  jsonInstance = json.loads(instance)
                  user = jsonInstance['User']
                  launchTime = jsonInstance['Launch']
                  timeLimit = jsonInstance['Limit']
                  if checkIfShutdown(int(timeLimit), launchTime):
                      stop(user)
                      shutdownList.remove(instance)
                  else:
                      if checkIfDelete(user):
                          shutdownList.remove(instance)
                      else:
                          print('Not time to shutdown.')
              
              stringList = '---'.join(map(str, shutdownList))
              print(stringList)
              if stringList == '':
                  stringList = '---'
              ssm.put_parameter(
                  Name='SageMakerData',
                  Value=stringList,
                  Type='String',
                  Overwrite=True
              )
